/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  LOLExchange,
  LOLExchangeInterface,
} from "../../contracts/LOLExchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lolToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "ListingCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
    ],
    name: "ListingSold",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "listingId",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "listings",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isSold",
        type: "bool",
      },
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lolToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200143238038062001432833981810160405281019062000037919062000271565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a49190620002c9565b60405180910390fd5b620000be816200014060201b60201c565b50620000db67ec8dcca584c449a760c01b6200020460201b60201c565b620000f7677b7619f1e78724b260c01b6200020460201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002e6565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000239826200020c565b9050919050565b6200024b816200022c565b81146200025757600080fd5b50565b6000815190506200026b8162000240565b92915050565b600080604083850312156200028b576200028a62000207565b5b60006200029b858286016200025a565b9250506020620002ae858286016200025a565b9150509250929050565b620002c3816200022c565b82525050565b6000602082019050620002e06000830184620002b8565b92915050565b61113c80620002f66000396000f3fe6080604052600436106100705760003560e01c80638b4b09ea1161004e5780638b4b09ea146100d15780638da5cb5b146100fc578063de74e57b14610127578063f2fde38b1461016957610070565b806324780c561461007557806351ed82881461009e578063715018a6146100ba575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610c8e565b610192565b005b6100b860048036038101906100b39190610ce1565b6105e5565b005b3480156100c657600080fd5b506100cf61092d565b005b3480156100dd57600080fd5b506100e6610941565b6040516100f39190610d6d565b60405180910390f35b34801561010857600080fd5b50610111610967565b60405161011e9190610d97565b60405180910390f35b34801561013357600080fd5b5061014e60048036038101906101499190610ce1565b610990565b60405161016096959493929190610ddc565b60405180910390f35b34801561017557600080fd5b50610190600480360381019061018b9190610e3d565b610a19565b005b6101a667172fe65a39e41ea160c01b610a9f565b6101ba6722bb0a708a395f4060c01b610a9f565b6101ce67a1930534f834f90a60c01b610a9f565b60008390506101e76750b2eb65e83c9ce860c01b610a9f565b6101fb6748dd164b20c1c24f60c01b610a9f565b61020f673f4ad3b11a148c6660c01b610a9f565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161025f9190610e6a565b602060405180830381865afa15801561027c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a09190610e9a565b73ffffffffffffffffffffffffffffffffffffffff16146102f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ed90610f4a565b60405180910390fd5b61030a676356971956962d7c60c01b610a9f565b61031e679ab2d52a67666dd060c01b610a9f565b61033267ee292b4a288e294860c01b610a9f565b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161036f93929190610f6a565b600060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b505050506103b567f9f8b49743c2480c60c01b610a9f565b600260008154809291906103c890610fd0565b91905055506103e16785ff8c283e18288660c01b610a9f565b6103f5675d62004cddf4412960c01b610a9f565b600060025490506104106717421a7103d4bfbc60c01b610a9f565b6040518060c001604052808281526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506105626771cbcca9811302bd60c01b610a9f565b610576678b41863f58ccd15260c01b610a9f565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16827fbfe9724d0a7254cfbb4f315c27418ff3751aebb099764b83fb3a4e2ca00e69d087876040516105d6929190611018565b60405180910390a45050505050565b6105f967257ef6da46bfdb1360c01b610a9f565b61060d674b07e326883fb57160c01b610a9f565b61062167dd7cf11537ac576b60c01b610a9f565b600060036000838152602001908152602001600020905061064c67ebd5f3710ebcc44a60c01b610a9f565b61066067f3b4275c728fd89660c01b610a9f565b610674679e07a5a1a52ba2e860c01b610a9f565b8060040160009054906101000a900460ff16156106c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bd9061108d565b60405180910390fd5b6106da672f2212dc5fbd4ac760c01b610a9f565b6106ee67b449595d272a4c6060c01b610a9f565b6107026778706ff6b0aaf89060c01b610a9f565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd338360040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600301546040518463ffffffff1660e01b815260040161078993929190610f6a565b6020604051808303816000875af11580156107a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cc91906110d9565b506107e16711ae760f43b64f3d60c01b610a9f565b6107f5671e61b7c3771de63e60c01b610a9f565b8060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd303384600201546040518463ffffffff1660e01b815260040161085a93929190610f6a565b600060405180830381600087803b15801561087457600080fd5b505af1158015610888573d6000803e3d6000fd5b505050506108a0678d71425225091c1c60c01b610a9f565b60018160040160006101000a81548160ff0219169083151502179055506108d167307710b895f72a4c60c01b610a9f565b6108e567317ab79e230439db60c01b610a9f565b3373ffffffffffffffffffffffffffffffffffffffff16827f8f9d273ad6b9ef6936db5cd20a141ecb032af10f2a5fec60c106343670b2c87760405160405180910390a35050565b610935610aa2565b61093f6000610b29565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b610a21610aa2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a935760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610a8a9190610d97565b60405180910390fd5b610a9c81610b29565b50565b50565b610aaa610bed565b73ffffffffffffffffffffffffffffffffffffffff16610ac8610967565b73ffffffffffffffffffffffffffffffffffffffff1614610b2757610aeb610bed565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610b1e9190610d97565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c2582610bfa565b9050919050565b610c3581610c1a565b8114610c4057600080fd5b50565b600081359050610c5281610c2c565b92915050565b6000819050919050565b610c6b81610c58565b8114610c7657600080fd5b50565b600081359050610c8881610c62565b92915050565b600080600060608486031215610ca757610ca6610bf5565b5b6000610cb586828701610c43565b9350506020610cc686828701610c79565b9250506040610cd786828701610c79565b9150509250925092565b600060208284031215610cf757610cf6610bf5565b5b6000610d0584828501610c79565b91505092915050565b6000819050919050565b6000610d33610d2e610d2984610bfa565b610d0e565b610bfa565b9050919050565b6000610d4582610d18565b9050919050565b6000610d5782610d3a565b9050919050565b610d6781610d4c565b82525050565b6000602082019050610d826000830184610d5e565b92915050565b610d9181610c1a565b82525050565b6000602082019050610dac6000830184610d88565b92915050565b610dbb81610c58565b82525050565b60008115159050919050565b610dd681610dc1565b82525050565b600060c082019050610df16000830189610db2565b610dfe6020830188610d88565b610e0b6040830187610db2565b610e186060830186610db2565b610e256080830185610dcd565b610e3260a0830184610d88565b979650505050505050565b600060208284031215610e5357610e52610bf5565b5b6000610e6184828501610c43565b91505092915050565b6000602082019050610e7f6000830184610db2565b92915050565b600081519050610e9481610c2c565b92915050565b600060208284031215610eb057610eaf610bf5565b5b6000610ebe84828501610e85565b91505092915050565b600082825260208201905092915050565b7f4c4f4c45786368616e67653a20546f6b656e206f776e65722063616e206f6e6c60008201527f7920637265617465206c697374696e6700000000000000000000000000000000602082015250565b6000610f34603083610ec7565b9150610f3f82610ed8565b604082019050919050565b60006020820190508181036000830152610f6381610f27565b9050919050565b6000606082019050610f7f6000830186610d88565b610f8c6020830185610d88565b610f996040830184610db2565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fdb82610c58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361100d5761100c610fa1565b5b600182019050919050565b600060408201905061102d6000830185610db2565b61103a6020830184610db2565b9392505050565b7f4c4f4c45786368616e67653a204e465420697320616c726561647920736f6c64600082015250565b6000611077602083610ec7565b915061108282611041565b602082019050919050565b600060208201905081810360008301526110a68161106a565b9050919050565b6110b681610dc1565b81146110c157600080fd5b50565b6000815190506110d3816110ad565b92915050565b6000602082840312156110ef576110ee610bf5565b5b60006110fd848285016110c4565b9150509291505056fea2646970667358221220840e7902128f267861d0bb09f9505390bf08874c06a3ae0f0b086753361589e064736f6c63430008140033";

type LOLExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LOLExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LOLExchange__factory extends ContractFactory {
  constructor(...args: LOLExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialOwner: AddressLike,
    _lolToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialOwner, _lolToken, overrides || {});
  }
  override deploy(
    initialOwner: AddressLike,
    _lolToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialOwner, _lolToken, overrides || {}) as Promise<
      LOLExchange & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LOLExchange__factory {
    return super.connect(runner) as LOLExchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LOLExchangeInterface {
    return new Interface(_abi) as LOLExchangeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LOLExchange {
    return new Contract(address, _abi, runner) as unknown as LOLExchange;
  }
}
